{"version":3,"sources":["wavify.js","init.js"],"names":["$","fn","wavify","options","lastUpdate","settings","extend","container","height","amplitude","speed","bones","color","wave","this","width","totalTime","draw","now","window","Date","elapsed","factor","Math","PI","TweenMax","to","attr","d","points","SVGString","x","y","cp0","prevCp","inverted","i","length","sqrt","cp1","drawPath","sinSeed","sinHeight","sin","yPos","push","drawPoints","ease","Power1","easeInOut","requestAnimationFrame","TweenLite","set","fill","func","wait","immediate","timeout","redraw","setTimeout","context","args","arguments","clearTimeout","apply","on","jQuery","each","_color","data","_height","_bones","_amplitude","_speed","find"],"mappings":"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","file":"../../wavify.min.js","sourcesContent":["/*\n*   Wavify\n*   Jquery Plugin to make some nice waves\n*   by peacepostman @ crezeo\n */\n(\n    function ( $ ) {\n\n        $.fn.wavify = function ( options ) {\n\n            //  Options\n            //\n            //\n            var settings = $.extend( {\n                container: options.container ? options.container : 'body', // Height of wave\n                height: 200, // Amplitude of wave\n                amplitude: 100, // Animation speed\n                speed: .15, // Total number of articulation in wave\n                bones: 3, // Color\n                color: 'rgba(255,255,255, 0.20)'\n            }, options );\n\n            var wave      = this,\n                width     = $( settings.container ).width(),\n                height    = $( settings.container ).height(),\n                points    = [],\n                lastUpdate,\n                totalTime = 0;\n\n            //  Set color\n            //\n            TweenLite.set( wave, {attr: {fill: settings.color}} );\n\n\n            function drawPoints( factor ) {\n                var points = [];\n\n                for ( var i = 0; i <= settings.bones; i ++ ) {\n                    var x         = i / settings.bones * width;\n                    var sinSeed   = (\n                                        factor + (\n                                        i + i % settings.bones\n                                        )\n                                    ) * settings.speed * 100;\n                    var sinHeight = Math.sin( sinSeed / 100 ) * settings.amplitude;\n                    var yPos      = Math.sin( sinSeed / 100 ) * sinHeight + settings.height;\n                    points.push( {\n                        x: x,\n                        y: yPos\n                    } );\n                }\n\n                return points;\n            }\n\n            function drawPath( points ) {\n                var SVGString = 'M ' + points[0].x + ' ' + points[0].y;\n\n                var cp0 = {\n                    x: (\n                           points[1].x - points[0].x\n                       ) / 2,\n                    y: (\n                           points[1].y - points[0].y\n                       ) + points[0].y + (\n                           points[1].y - points[0].y\n                       )\n                };\n\n                SVGString +=\n                    ' C ' + cp0.x + ' ' + cp0.y + ' ' + cp0.x + ' ' + cp0.y + ' ' + points[1].x + ' ' + points[1].y;\n\n                var prevCp   = cp0;\n                var inverted = - 1;\n\n                for ( var i = 1; i < points.length - 1; i ++ ) {\n                    var cpLength = Math.sqrt( prevCp.x * prevCp.x + prevCp.y * prevCp.y );\n                    var cp1      = {\n                        x: (\n                               points[i].x - prevCp.x\n                           ) + points[i].x,\n                        y: (\n                               points[i].y - prevCp.y\n                           ) + points[i].y\n                    };\n\n                    SVGString +=\n                        ' C ' + cp1.x + ' ' + cp1.y + ' ' + cp1.x + ' ' + cp1.y + ' ' + points[i + 1].x + ' ' + points[i + 1].y;\n                    prevCp   = cp1;\n                    inverted = - inverted;\n                }\n\n                SVGString += ' L ' + width + ' ' + height;\n                SVGString += ' L 0 ' + height + ' Z';\n                return SVGString;\n            }\n\n            //  Draw function\n            //\n            //\n            function draw() {\n                var now = window.Date.now();\n\n                if ( lastUpdate ) {\n                    var elapsed = (\n                                      now - lastUpdate\n                                  ) / 1000;\n                    lastUpdate  = now;\n\n                    totalTime += elapsed;\n\n                    var factor = totalTime * Math.PI;\n                    TweenMax.to( wave, settings.speed, {\n                        attr: {\n                            d: drawPath( drawPoints( factor ) )\n                        },\n                        ease: Power1.easeInOut\n                    } );\n\n                } else {\n                    lastUpdate = now;\n                }\n\n                requestAnimationFrame( draw );\n            }\n\n            //  Pure js debounce function to optimize resize method\n            //\n            //\n            function debounce( func, wait, immediate ) {\n                var timeout;\n                return function () {\n                    var context = this,\n                        args    = arguments;\n                    clearTimeout( timeout );\n                    timeout = setTimeout( function () {\n                        timeout = null;\n                        if ( ! immediate ) {\n                            func.apply( context, args );\n                        }\n                    }, wait );\n                    if ( immediate && ! timeout ) {\n                        func.apply( context, args );\n                    }\n                };\n            }\n\n            //  Redraw for resize with debounce\n            //\n            var redraw = debounce( function () {\n                wave.attr( 'd', '' );\n                points     = [];\n                totalTime  = 0;\n                width      = $( settings.container ).width();\n                height     = $( settings.container ).height();\n                lastUpdate = false;\n                setTimeout( function () {\n                    draw();\n                }, 50 );\n            }, 250 );\n            $( window ).on( 'resize', redraw );\n\n\n            //  Execute\n            //\n            return draw();\n\n        };\n\n    }( jQuery )\n);\n","(\n    function ( $ ) {\n        'use strict';\n\n        $( window ).on( 'load', function () {\n            $( '.wavify-item' ).each( function () {\n\n                var _color     = $( this ).data( 'wavify-background' ) ? $( this ).data( 'wavify-background' ) : '#fff',\n                    _height    = $( this ).data( 'wavify-height' ) ? $( this ).data( 'wavify-height' ) : 100,\n                    _bones     = $( this ).data( 'wavify-bones' ) ? $( this ).data( 'wavify-bones' ) : 3,\n                    _amplitude = $( this ).data( 'wavify-amplitude' ) ? $( this ).data( 'wavify-amplitude' ) : 80,\n                    _speed     = $( this ).data( 'wavify-speed' ) ? $( this ).data( 'wavify-speed' ) : .15;\n\n                $( this ).find( 'path' ).wavify( {\n                    height: _height,\n                    bones: _bones,\n                    amplitude: _amplitude,\n                    color: _color,\n                    speed: _speed\n                } );\n            } );\n        } );\n    }( window.jQuery )\n);\n"]}